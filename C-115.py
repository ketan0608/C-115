# -*- coding: utf-8 -*-
"""C-115.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132YwvAh-_Pvod0D_VulcFd26lh-PWqic
"""

from google.colab import files
files_to_load=files.upload()

import plotly.express as px
import csv
import pandas as pd
df=pd.read_csv('data.csv')
temperature_list=df['Temperature'].tolist()
melted_list=df['Melted'].tolist()
fig=px.scatter(x=temperature_list,y=melted_list)
fig.show()

import numpy as np
temperature_array=np.array(temperature_list)
melted_array=np.array(melted_list)
m,c=np.polyfit(temperature_array,melted_array,1)
y=[]
for x in temperature_array:
  y_value=m*x+c
  y.append(y_value)
fig=px.scatter(x=temperature_array,y=melted_array)
fig.update_layout(shapes=[dict(
    type='line',
    y0=min(y),y1=max(y),
    x0=min(temperature_array),x1=max(temperature_array)
)])
fig.show()

import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
X=np.reshape(temperature_list,(len(temperature_list),1))
Y=np.reshape(melted_list,(len(melted_list),1))
lr=LogisticRegression()
lr.fit(X,Y)
def model(x):
  return 1/(1+np.exp(-x))
X_test=np.linspace(0,5000,10000)
melting_chances=model(X_test*lr.coef_+lr.intercept_).ravel()
plt.plot(X_test,melting_chances,color='c',linewidth=3)
plt.axhline(y=0,color='k',linestyle='-')
plt.axhline(y=1,color='k',linestyle='-')
plt.axhline(y=0.5,color='b',linestyle='--')
plt.axvline(x=X_test[6843],color='r',linestyle='--')
plt.ylabel('y')
plt.xlabel('X')
plt.xlim(3400,3450)
plt.show()

temperature=float(input('Enter the temperature:'))
melting_chances=model(temperature*lr.coef_+lr.intercept_).ravel()
if melting_chances<=0.01:
  print('Tungsten will not be melted')
elif melting_chances>=1:
  print('Tungsten will be melted')
elif melting_chances<0.05:
  print('Tungsten will might not get melted')
else:
  print('Tungsten will get melted')